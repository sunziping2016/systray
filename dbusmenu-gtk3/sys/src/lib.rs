// Generated by gir (https://github.com/gtk-rs/gir @ e43ea0b348f0)
// from ../../gir-files (@ dd572419067b)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(clippy::approx_constant, clippy::type_complexity, clippy::unreadable_literal, clippy::upper_case_acronyms)]
#![cfg_attr(feature = "dox", feature(doc_cfg))]


#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, intptr_t, uintptr_t, FILE};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

// Constants
pub const DBUSMENU_GTK_MENUITEM_H__: c_int = 1;

// Records
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DbusmenuGtkClientClass {
    pub parent_class: dbusmenu::DbusmenuClientClass,
    pub root_changed: Option<unsafe extern "C" fn(*mut dbusmenu::DbusmenuMenuitem)>,
    pub reserved1: Option<unsafe extern "C" fn()>,
    pub reserved2: Option<unsafe extern "C" fn()>,
    pub reserved3: Option<unsafe extern "C" fn()>,
    pub reserved4: Option<unsafe extern "C" fn()>,
    pub reserved5: Option<unsafe extern "C" fn()>,
    pub reserved6: Option<unsafe extern "C" fn()>,
}

impl ::std::fmt::Debug for DbusmenuGtkClientClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("DbusmenuGtkClientClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .field("root_changed", &self.root_changed)
         .field("reserved1", &self.reserved1)
         .field("reserved2", &self.reserved2)
         .field("reserved3", &self.reserved3)
         .field("reserved4", &self.reserved4)
         .field("reserved5", &self.reserved5)
         .field("reserved6", &self.reserved6)
         .finish()
    }
}

#[repr(C)]
pub struct _DbusmenuGtkClientPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type DbusmenuGtkClientPrivate = *mut _DbusmenuGtkClientPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct DbusmenuGtkMenuClass {
    pub parent_class: gtk::GtkMenuClass,
    pub reserved1: Option<unsafe extern "C" fn()>,
    pub reserved2: Option<unsafe extern "C" fn()>,
    pub reserved3: Option<unsafe extern "C" fn()>,
    pub reserved4: Option<unsafe extern "C" fn()>,
    pub reserved5: Option<unsafe extern "C" fn()>,
    pub reserved6: Option<unsafe extern "C" fn()>,
}

impl ::std::fmt::Debug for DbusmenuGtkMenuClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("DbusmenuGtkMenuClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .field("reserved1", &self.reserved1)
         .field("reserved2", &self.reserved2)
         .field("reserved3", &self.reserved3)
         .field("reserved4", &self.reserved4)
         .field("reserved5", &self.reserved5)
         .field("reserved6", &self.reserved6)
         .finish()
    }
}

#[repr(C)]
pub struct _DbusmenuGtkMenuPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type DbusmenuGtkMenuPrivate = *mut _DbusmenuGtkMenuPrivate;

// Classes
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DbusmenuGtkClient {
    pub parent: dbusmenu::DbusmenuClient,
    pub priv_: *mut DbusmenuGtkClientPrivate,
}

impl ::std::fmt::Debug for DbusmenuGtkClient {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("DbusmenuGtkClient @ {:p}", self))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct DbusmenuGtkMenu {
    pub parent: gtk::GtkMenu,
    pub priv_: *mut DbusmenuGtkMenuPrivate,
}

impl ::std::fmt::Debug for DbusmenuGtkMenu {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("DbusmenuGtkMenu @ {:p}", self))
         .field("parent", &self.parent)
         .field("priv_", &self.priv_)
         .finish()
    }
}

#[link(name = "dbusmenu-gtk3")]
#[link(name = "dbusmenu-glib")]
extern "C" {

    //=========================================================================
    // DbusmenuGtkClient
    //=========================================================================
    pub fn dbusmenu_gtkclient_get_type() -> GType;
    pub fn dbusmenu_gtkclient_new(dbus_name: *mut c_char, dbus_object: *mut c_char) -> *mut DbusmenuGtkClient;
    pub fn dbusmenu_gtkclient_get_accel_group(client: *mut DbusmenuGtkClient) -> *mut gtk::GtkAccelGroup;
    pub fn dbusmenu_gtkclient_menuitem_get(client: *mut DbusmenuGtkClient, item: *mut dbusmenu::DbusmenuMenuitem) -> *mut gtk::GtkMenuItem;
    pub fn dbusmenu_gtkclient_menuitem_get_submenu(client: *mut DbusmenuGtkClient, item: *mut dbusmenu::DbusmenuMenuitem) -> *mut gtk::GtkMenu;
    pub fn dbusmenu_gtkclient_newitem_base(client: *mut DbusmenuGtkClient, item: *mut dbusmenu::DbusmenuMenuitem, gmi: *mut gtk::GtkMenuItem, parent: *mut dbusmenu::DbusmenuMenuitem);
    pub fn dbusmenu_gtkclient_set_accel_group(client: *mut DbusmenuGtkClient, agroup: *mut gtk::GtkAccelGroup);

    //=========================================================================
    // DbusmenuGtkMenu
    //=========================================================================
    pub fn dbusmenu_gtkmenu_get_type() -> GType;
    pub fn dbusmenu_gtkmenu_new(dbus_name: *mut c_char, dbus_object: *mut c_char) -> *mut DbusmenuGtkMenu;
    pub fn dbusmenu_gtkmenu_get_client(menu: *mut DbusmenuGtkMenu) -> *mut DbusmenuGtkClient;

    //=========================================================================
    // Other functions
    //=========================================================================
    pub fn dbusmenu_gtk_parse_get_cached_item(widget: *mut gtk::GtkWidget) -> *mut dbusmenu::DbusmenuMenuitem;
    pub fn dbusmenu_gtk_parse_menu_structure(widget: *mut gtk::GtkWidget) -> *mut dbusmenu::DbusmenuMenuitem;
    pub fn dbusmenu_menuitem_property_get_image(menuitem: *mut dbusmenu::DbusmenuMenuitem, property: *const c_char) -> *mut gdk_pixbuf::GdkPixbuf;
    pub fn dbusmenu_menuitem_property_get_shortcut(menuitem: *mut dbusmenu::DbusmenuMenuitem, key: *mut c_uint, modifier: *mut gdk::GdkModifierType);
    pub fn dbusmenu_menuitem_property_set_image(menuitem: *mut dbusmenu::DbusmenuMenuitem, property: *const c_char, data: *const gdk_pixbuf::GdkPixbuf) -> gboolean;
    pub fn dbusmenu_menuitem_property_set_shortcut(menuitem: *mut dbusmenu::DbusmenuMenuitem, key: c_uint, modifier: gdk::GdkModifierType) -> gboolean;
    pub fn dbusmenu_menuitem_property_set_shortcut_menuitem(menuitem: *mut dbusmenu::DbusmenuMenuitem, gmi: *const gtk::GtkMenuItem) -> gboolean;
    pub fn dbusmenu_menuitem_property_set_shortcut_string(menuitem: *mut dbusmenu::DbusmenuMenuitem, shortcut: *const c_char) -> gboolean;

}
