// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::Client;
use glib::object::IsA;
use glib::translate::*;
use glib::StaticType;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "DbusmenuGtkMenu")]
    pub struct Menu(Object<ffi::DbusmenuGtkMenu, ffi::DbusmenuGtkMenuClass>);

    match fn {
        type_ => || ffi::dbusmenu_gtkmenu_get_type(),
    }
}

impl Menu {
        pub const NONE: Option<&'static Menu> = None;
    

    #[doc(alias = "dbusmenu_gtkmenu_new")]
    pub fn new(dbus_name: &str, dbus_object: &str) -> Menu {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::dbusmenu_gtkmenu_new(dbus_name.to_glib_none().0, dbus_object.to_glib_none().0))
        }
    }
}

pub trait MenuExt: 'static {
    #[doc(alias = "dbusmenu_gtkmenu_get_client")]
    #[doc(alias = "get_client")]
    fn client(&self) -> Option<Client>;

    #[doc(alias = "dbus-name")]
    fn dbus_name(&self) -> Option<glib::GString>;

    #[doc(alias = "dbus-object")]
    fn dbus_object(&self) -> Option<glib::GString>;
}

impl<O: IsA<Menu>> MenuExt for O {
    fn client(&self) -> Option<Client> {
        unsafe {
            from_glib_none(ffi::dbusmenu_gtkmenu_get_client(self.as_ref().to_glib_none().0))
        }
    }

    fn dbus_name(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self.as_ref(), "dbus-name")
    }

    fn dbus_object(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self.as_ref(), "dbus-object")
    }
}

impl fmt::Display for Menu {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Menu")
    }
}
