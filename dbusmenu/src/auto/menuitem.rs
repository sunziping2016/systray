// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "DbusmenuMenuitem")]
    pub struct Menuitem(Object<ffi::DbusmenuMenuitem, ffi::DbusmenuMenuitemClass>);

    match fn {
        type_ => || ffi::dbusmenu_menuitem_get_type(),
    }
}

impl Menuitem {
        pub const NONE: Option<&'static Menuitem> = None;
    

    #[doc(alias = "dbusmenu_menuitem_new")]
    pub fn new() -> Menuitem {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::dbusmenu_menuitem_new())
        }
    }

    #[doc(alias = "dbusmenu_menuitem_new_with_id")]
    #[doc(alias = "new_with_id")]
    pub fn with_id(id: i32) -> Menuitem {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::dbusmenu_menuitem_new_with_id(id))
        }
    }
}

impl Default for Menuitem {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

pub trait MenuitemExt: 'static {
    #[doc(alias = "dbusmenu_menuitem_child_add_position")]
    fn child_add_position(&self, child: &impl IsA<Menuitem>, position: u32) -> bool;

    #[doc(alias = "dbusmenu_menuitem_child_append")]
    fn child_append(&self, child: &impl IsA<Menuitem>) -> bool;

    #[doc(alias = "dbusmenu_menuitem_child_delete")]
    fn child_delete(&self, child: &impl IsA<Menuitem>) -> bool;

    #[doc(alias = "dbusmenu_menuitem_child_find")]
#[must_use]
    fn child_find(&self, id: i32) -> Option<Menuitem>;

    #[doc(alias = "dbusmenu_menuitem_child_prepend")]
    fn child_prepend(&self, child: &impl IsA<Menuitem>) -> bool;

    #[doc(alias = "dbusmenu_menuitem_child_reorder")]
    fn child_reorder(&self, child: &impl IsA<Menuitem>, position: u32) -> bool;

    #[doc(alias = "dbusmenu_menuitem_find_id")]
#[must_use]
    fn find_id(&self, id: i32) -> Option<Menuitem>;

    #[doc(alias = "dbusmenu_menuitem_foreach")]
    fn foreach(&self, callback: Option<&mut dyn (FnMut(&Menuitem))>);

    #[doc(alias = "dbusmenu_menuitem_get_children")]
    #[doc(alias = "get_children")]
    fn children(&self) -> Vec<Menuitem>;

    #[doc(alias = "dbusmenu_menuitem_get_id")]
    #[doc(alias = "get_id")]
    fn id(&self) -> i32;

    #[doc(alias = "dbusmenu_menuitem_get_parent")]
    #[doc(alias = "get_parent")]
#[must_use]
    fn parent(&self) -> Option<Menuitem>;

    #[doc(alias = "dbusmenu_menuitem_get_position")]
    #[doc(alias = "get_position")]
    fn position(&self, parent: &impl IsA<Menuitem>) -> u32;

    #[doc(alias = "dbusmenu_menuitem_get_position_realized")]
    #[doc(alias = "get_position_realized")]
    fn position_realized(&self, parent: &impl IsA<Menuitem>) -> u32;

    #[doc(alias = "dbusmenu_menuitem_get_root")]
    #[doc(alias = "get_root")]
    fn is_root(&self) -> bool;

    #[doc(alias = "dbusmenu_menuitem_properties_list")]
    fn properties_list(&self) -> Vec<glib::GString>;

    #[doc(alias = "dbusmenu_menuitem_property_exist")]
    fn property_exist(&self, property: &str) -> bool;

    #[doc(alias = "dbusmenu_menuitem_property_get")]
    fn property_get(&self, property: &str) -> Option<glib::GString>;

    #[doc(alias = "dbusmenu_menuitem_property_get_bool")]
    fn property_get_bool(&self, property: &str) -> bool;

    #[doc(alias = "dbusmenu_menuitem_property_get_byte_array")]
    fn property_get_byte_array(&self, property: &str) -> Vec<u8>;

    #[doc(alias = "dbusmenu_menuitem_property_get_int")]
    fn property_get_int(&self, property: &str) -> i32;

    #[doc(alias = "dbusmenu_menuitem_property_remove")]
    fn property_remove(&self, property: &str);

    #[doc(alias = "dbusmenu_menuitem_property_set")]
    fn property_set(&self, property: &str, value: &str) -> bool;

    #[doc(alias = "dbusmenu_menuitem_property_set_bool")]
    fn property_set_bool(&self, property: &str, value: bool) -> bool;

    #[doc(alias = "dbusmenu_menuitem_property_set_int")]
    fn property_set_int(&self, property: &str, value: i32) -> bool;

    #[doc(alias = "dbusmenu_menuitem_send_about_to_show")]
    fn send_about_to_show(&self, callback: Option<Box_<dyn FnOnce(&Menuitem) + 'static>>);

    #[doc(alias = "dbusmenu_menuitem_set_parent")]
    fn set_parent(&self, parent: &impl IsA<Menuitem>) -> bool;

    #[doc(alias = "dbusmenu_menuitem_set_root")]
    fn set_root(&self, root: bool);

    #[doc(alias = "dbusmenu_menuitem_show_to_user")]
    fn show_to_user(&self, timestamp: u32);

    #[doc(alias = "dbusmenu_menuitem_take_children")]
    fn take_children(&self) -> Vec<Menuitem>;

    #[doc(alias = "dbusmenu_menuitem_unparent")]
    fn unparent(&self) -> bool;

    #[doc(alias = "about-to-show")]
    fn connect_about_to_show<F: Fn(&Self) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "child-added")]
    fn connect_child_added<F: Fn(&Self, &Menuitem, u32) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "child-moved")]
    fn connect_child_moved<F: Fn(&Self, &Menuitem, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "child-removed")]
    fn connect_child_removed<F: Fn(&Self, &Menuitem) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "item-activated")]
    fn connect_item_activated<F: Fn(&Self, u32) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "realized")]
    fn connect_realized<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "show-to-user")]
    fn connect_show_to_user<F: Fn(&Self, u32) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Menuitem>> MenuitemExt for O {
    fn child_add_position(&self, child: &impl IsA<Menuitem>, position: u32) -> bool {
        unsafe {
            from_glib(ffi::dbusmenu_menuitem_child_add_position(self.as_ref().to_glib_none().0, child.as_ref().to_glib_none().0, position))
        }
    }

    fn child_append(&self, child: &impl IsA<Menuitem>) -> bool {
        unsafe {
            from_glib(ffi::dbusmenu_menuitem_child_append(self.as_ref().to_glib_none().0, child.as_ref().to_glib_none().0))
        }
    }

    fn child_delete(&self, child: &impl IsA<Menuitem>) -> bool {
        unsafe {
            from_glib(ffi::dbusmenu_menuitem_child_delete(self.as_ref().to_glib_none().0, child.as_ref().to_glib_none().0))
        }
    }

    fn child_find(&self, id: i32) -> Option<Menuitem> {
        unsafe {
            from_glib_none(ffi::dbusmenu_menuitem_child_find(self.as_ref().to_glib_none().0, id))
        }
    }

    fn child_prepend(&self, child: &impl IsA<Menuitem>) -> bool {
        unsafe {
            from_glib(ffi::dbusmenu_menuitem_child_prepend(self.as_ref().to_glib_none().0, child.as_ref().to_glib_none().0))
        }
    }

    fn child_reorder(&self, child: &impl IsA<Menuitem>, position: u32) -> bool {
        unsafe {
            from_glib(ffi::dbusmenu_menuitem_child_reorder(self.as_ref().to_glib_none().0, child.as_ref().to_glib_none().0, position))
        }
    }

    fn find_id(&self, id: i32) -> Option<Menuitem> {
        unsafe {
            from_glib_none(ffi::dbusmenu_menuitem_find_id(self.as_ref().to_glib_none().0, id))
        }
    }

    fn foreach(&self, callback: Option<&mut dyn (FnMut(&Menuitem))>) {
        let callback_data: Option<&mut dyn (FnMut(&Menuitem))> = callback;
        unsafe extern "C" fn callback_func(mi: *mut ffi::DbusmenuMenuitem, user_data: glib::ffi::gpointer) {
            let mi = from_glib_borrow(mi);
            let callback: *mut Option<&mut dyn (FnMut(&Menuitem))> = user_data as *const _ as usize as *mut Option<&mut dyn (FnMut(&Menuitem))>;
            if let Some(ref mut callback) = *callback {
                callback(&mi)
            } else {
                panic!("cannot get closure...")
            };
        }
        let callback = if callback_data.is_some() { Some(callback_func as _) } else { None };
        let super_callback0: &Option<&mut dyn (FnMut(&Menuitem))> = &callback_data;
        unsafe {
            ffi::dbusmenu_menuitem_foreach(self.as_ref().to_glib_none().0, callback, super_callback0 as *const _ as usize as *mut _);
        }
    }

    fn children(&self) -> Vec<Menuitem> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::dbusmenu_menuitem_get_children(self.as_ref().to_glib_none().0))
        }
    }

    fn id(&self) -> i32 {
        unsafe {
            ffi::dbusmenu_menuitem_get_id(self.as_ref().to_glib_none().0)
        }
    }

    fn parent(&self) -> Option<Menuitem> {
        unsafe {
            from_glib_none(ffi::dbusmenu_menuitem_get_parent(self.as_ref().to_glib_none().0))
        }
    }

    fn position(&self, parent: &impl IsA<Menuitem>) -> u32 {
        unsafe {
            ffi::dbusmenu_menuitem_get_position(self.as_ref().to_glib_none().0, parent.as_ref().to_glib_none().0)
        }
    }

    fn position_realized(&self, parent: &impl IsA<Menuitem>) -> u32 {
        unsafe {
            ffi::dbusmenu_menuitem_get_position_realized(self.as_ref().to_glib_none().0, parent.as_ref().to_glib_none().0)
        }
    }

    fn is_root(&self) -> bool {
        unsafe {
            from_glib(ffi::dbusmenu_menuitem_get_root(self.as_ref().to_glib_none().0))
        }
    }

    fn properties_list(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::dbusmenu_menuitem_properties_list(self.as_ref().to_glib_none().0))
        }
    }

    fn property_exist(&self, property: &str) -> bool {
        unsafe {
            from_glib(ffi::dbusmenu_menuitem_property_exist(const_override(self.as_ref().to_glib_none().0), property.to_glib_none().0))
        }
    }

    fn property_get(&self, property: &str) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::dbusmenu_menuitem_property_get(const_override(self.as_ref().to_glib_none().0), property.to_glib_none().0))
        }
    }

    fn property_get_bool(&self, property: &str) -> bool {
        unsafe {
            from_glib(ffi::dbusmenu_menuitem_property_get_bool(const_override(self.as_ref().to_glib_none().0), property.to_glib_none().0))
        }
    }

    fn property_get_byte_array(&self, property: &str) -> Vec<u8> {
        unsafe {
            let mut nelements = mem::MaybeUninit::uninit();
            let ret = FromGlibContainer::from_glib_none_num(ffi::dbusmenu_menuitem_property_get_byte_array(const_override(self.as_ref().to_glib_none().0), property.to_glib_none().0, nelements.as_mut_ptr()), nelements.assume_init() as usize);
            ret
        }
    }

    fn property_get_int(&self, property: &str) -> i32 {
        unsafe {
            ffi::dbusmenu_menuitem_property_get_int(const_override(self.as_ref().to_glib_none().0), property.to_glib_none().0)
        }
    }

    fn property_remove(&self, property: &str) {
        unsafe {
            ffi::dbusmenu_menuitem_property_remove(self.as_ref().to_glib_none().0, property.to_glib_none().0);
        }
    }

    fn property_set(&self, property: &str, value: &str) -> bool {
        unsafe {
            from_glib(ffi::dbusmenu_menuitem_property_set(self.as_ref().to_glib_none().0, property.to_glib_none().0, value.to_glib_none().0))
        }
    }

    fn property_set_bool(&self, property: &str, value: bool) -> bool {
        unsafe {
            from_glib(ffi::dbusmenu_menuitem_property_set_bool(self.as_ref().to_glib_none().0, property.to_glib_none().0, value.into_glib()))
        }
    }

    fn property_set_int(&self, property: &str, value: i32) -> bool {
        unsafe {
            from_glib(ffi::dbusmenu_menuitem_property_set_int(self.as_ref().to_glib_none().0, property.to_glib_none().0, value))
        }
    }

    fn send_about_to_show(&self, callback: Option<Box_<dyn FnOnce(&Menuitem) + 'static>>) {
        let callback_data: Box_<Option<Box_<dyn FnOnce(&Menuitem) + 'static>>> = Box_::new(callback);
        unsafe extern "C" fn callback_func(mi: *mut ffi::DbusmenuMenuitem, user_data: glib::ffi::gpointer) {
            let mi = from_glib_borrow(mi);
            let callback: Box_<Option<Box_<dyn FnOnce(&Menuitem) + 'static>>> = Box_::from_raw(user_data as *mut _);
            let callback = (*callback).expect("cannot get closure...");
            callback(&mi)
        }
        let callback = if callback_data.is_some() { Some(callback_func as _) } else { None };
        let super_callback0: Box_<Option<Box_<dyn FnOnce(&Menuitem) + 'static>>> = callback_data;
        unsafe {
            ffi::dbusmenu_menuitem_send_about_to_show(self.as_ref().to_glib_none().0, callback, Box_::into_raw(super_callback0) as *mut _);
        }
    }

    fn set_parent(&self, parent: &impl IsA<Menuitem>) -> bool {
        unsafe {
            from_glib(ffi::dbusmenu_menuitem_set_parent(self.as_ref().to_glib_none().0, parent.as_ref().to_glib_none().0))
        }
    }

    fn set_root(&self, root: bool) {
        unsafe {
            ffi::dbusmenu_menuitem_set_root(self.as_ref().to_glib_none().0, root.into_glib());
        }
    }

    fn show_to_user(&self, timestamp: u32) {
        unsafe {
            ffi::dbusmenu_menuitem_show_to_user(self.as_ref().to_glib_none().0, timestamp);
        }
    }

    fn take_children(&self) -> Vec<Menuitem> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::dbusmenu_menuitem_take_children(self.as_ref().to_glib_none().0))
        }
    }

    fn unparent(&self) -> bool {
        unsafe {
            from_glib(ffi::dbusmenu_menuitem_unparent(self.as_ref().to_glib_none().0))
        }
    }

    fn connect_about_to_show<F: Fn(&Self) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn about_to_show_trampoline<P: IsA<Menuitem>, F: Fn(&P) -> bool + 'static>(this: *mut ffi::DbusmenuMenuitem, f: glib::ffi::gpointer) -> glib::ffi::gboolean {
            let f: &F = &*(f as *const F);
            f(Menuitem::from_glib_borrow(this).unsafe_cast_ref()).into_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"about-to-show\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(about_to_show_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_child_added<F: Fn(&Self, &Menuitem, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn child_added_trampoline<P: IsA<Menuitem>, F: Fn(&P, &Menuitem, u32) + 'static>(this: *mut ffi::DbusmenuMenuitem, arg1: *mut ffi::DbusmenuMenuitem, arg2: libc::c_uint, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Menuitem::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(arg1), arg2)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"child-added\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(child_added_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_child_moved<F: Fn(&Self, &Menuitem, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn child_moved_trampoline<P: IsA<Menuitem>, F: Fn(&P, &Menuitem, u32, u32) + 'static>(this: *mut ffi::DbusmenuMenuitem, arg1: *mut ffi::DbusmenuMenuitem, arg2: libc::c_uint, arg3: libc::c_uint, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Menuitem::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(arg1), arg2, arg3)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"child-moved\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(child_moved_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_child_removed<F: Fn(&Self, &Menuitem) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn child_removed_trampoline<P: IsA<Menuitem>, F: Fn(&P, &Menuitem) + 'static>(this: *mut ffi::DbusmenuMenuitem, arg1: *mut ffi::DbusmenuMenuitem, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Menuitem::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(arg1))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"child-removed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(child_removed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_item_activated<F: Fn(&Self, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn item_activated_trampoline<P: IsA<Menuitem>, F: Fn(&P, u32) + 'static>(this: *mut ffi::DbusmenuMenuitem, arg1: libc::c_uint, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Menuitem::from_glib_borrow(this).unsafe_cast_ref(), arg1)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"item-activated\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(item_activated_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_realized<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn realized_trampoline<P: IsA<Menuitem>, F: Fn(&P) + 'static>(this: *mut ffi::DbusmenuMenuitem, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Menuitem::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"realized\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(realized_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_show_to_user<F: Fn(&Self, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn show_to_user_trampoline<P: IsA<Menuitem>, F: Fn(&P, u32) + 'static>(this: *mut ffi::DbusmenuMenuitem, arg1: libc::c_uint, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Menuitem::from_glib_borrow(this).unsafe_cast_ref(), arg1)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"show-to-user\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(show_to_user_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Menuitem {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Menuitem")
    }
}
