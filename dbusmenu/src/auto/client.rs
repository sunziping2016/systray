// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::Menuitem;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::ToValue;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "DbusmenuClient")]
    pub struct Client(Object<ffi::DbusmenuClient, ffi::DbusmenuClientClass>);

    match fn {
        type_ => || ffi::dbusmenu_client_get_type(),
    }
}

impl Client {
        pub const NONE: Option<&'static Client> = None;
    

    #[doc(alias = "dbusmenu_client_new")]
    pub fn new(name: &str, object: &str) -> Client {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::dbusmenu_client_new(name.to_glib_none().0, object.to_glib_none().0))
        }
    }
}

pub trait ClientExt: 'static {
    #[doc(alias = "dbusmenu_client_add_type_handler_full")]
    fn add_type_handler_full<P: Fn(&Menuitem, &Menuitem, &Client) -> bool + 'static>(&self, type_: &str, newfunc: P) -> bool;

    #[doc(alias = "dbusmenu_client_get_icon_paths")]
    #[doc(alias = "get_icon_paths")]
    fn icon_paths(&self) -> Vec<glib::GString>;

    #[doc(alias = "dbusmenu_client_get_root")]
    #[doc(alias = "get_root")]
    fn root(&self) -> Option<Menuitem>;

    #[doc(alias = "dbus-name")]
    fn dbus_name(&self) -> Option<glib::GString>;

    #[doc(alias = "dbus-object")]
    fn dbus_object(&self) -> Option<glib::GString>;

    #[doc(alias = "group-events")]
    fn is_group_events(&self) -> bool;

    #[doc(alias = "group-events")]
    fn set_group_events(&self, group_events: bool);

    #[doc(alias = "item-activate")]
    fn connect_item_activate<F: Fn(&Self, &Menuitem, u32) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "layout-updated")]
    fn connect_layout_updated<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "new-menuitem")]
    fn connect_new_menuitem<F: Fn(&Self, &Menuitem) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "root-changed")]
    fn connect_root_changed<F: Fn(&Self, &Menuitem) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "group-events")]
    fn connect_group_events_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Client>> ClientExt for O {
    fn add_type_handler_full<P: Fn(&Menuitem, &Menuitem, &Client) -> bool + 'static>(&self, type_: &str, newfunc: P) -> bool {
        let newfunc_data: Box_<P> = Box_::new(newfunc);
        unsafe extern "C" fn newfunc_func<P: Fn(&Menuitem, &Menuitem, &Client) -> bool + 'static>(newitem: *mut ffi::DbusmenuMenuitem, parent: *mut ffi::DbusmenuMenuitem, client: *mut ffi::DbusmenuClient, user_data: glib::ffi::gpointer) -> glib::ffi::gboolean {
            let newitem = from_glib_borrow(newitem);
            let parent = from_glib_borrow(parent);
            let client = from_glib_borrow(client);
            let callback: &P = &*(user_data as *mut _);
            let res = (*callback)(&newitem, &parent, &client);
            res.into_glib()
        }
        let newfunc = Some(newfunc_func::<P> as _);
        unsafe extern "C" fn destroy_func_func<P: Fn(&Menuitem, &Menuitem, &Client) -> bool + 'static>(data: glib::ffi::gpointer) {
            let _callback: Box_<P> = Box_::from_raw(data as *mut _);
        }
        let destroy_call4 = Some(destroy_func_func::<P> as _);
        let super_callback0: Box_<P> = newfunc_data;
        unsafe {
            from_glib(ffi::dbusmenu_client_add_type_handler_full(self.as_ref().to_glib_none().0, type_.to_glib_none().0, newfunc, Box_::into_raw(super_callback0) as *mut _, destroy_call4))
        }
    }

    fn icon_paths(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::dbusmenu_client_get_icon_paths(self.as_ref().to_glib_none().0))
        }
    }

    fn root(&self) -> Option<Menuitem> {
        unsafe {
            from_glib_none(ffi::dbusmenu_client_get_root(self.as_ref().to_glib_none().0))
        }
    }

    fn dbus_name(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self.as_ref(), "dbus-name")
    }

    fn dbus_object(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self.as_ref(), "dbus-object")
    }

    fn is_group_events(&self) -> bool {
        glib::ObjectExt::property(self.as_ref(), "group-events")
    }

    fn set_group_events(&self, group_events: bool) {
        glib::ObjectExt::set_property(self.as_ref(),"group-events", &group_events)
    }

    fn connect_item_activate<F: Fn(&Self, &Menuitem, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn item_activate_trampoline<P: IsA<Client>, F: Fn(&P, &Menuitem, u32) + 'static>(this: *mut ffi::DbusmenuClient, arg1: *mut ffi::DbusmenuMenuitem, arg2: libc::c_uint, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(arg1), arg2)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"item-activate\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(item_activate_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_layout_updated<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn layout_updated_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::DbusmenuClient, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"layout-updated\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(layout_updated_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_new_menuitem<F: Fn(&Self, &Menuitem) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn new_menuitem_trampoline<P: IsA<Client>, F: Fn(&P, &Menuitem) + 'static>(this: *mut ffi::DbusmenuClient, arg1: *mut ffi::DbusmenuMenuitem, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(arg1))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"new-menuitem\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(new_menuitem_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_root_changed<F: Fn(&Self, &Menuitem) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn root_changed_trampoline<P: IsA<Client>, F: Fn(&P, &Menuitem) + 'static>(this: *mut ffi::DbusmenuClient, arg1: *mut ffi::DbusmenuMenuitem, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(arg1))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"root-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(root_changed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_group_events_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_group_events_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::DbusmenuClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::group-events\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_group_events_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Client {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Client")
    }
}
