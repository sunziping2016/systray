// Generated by gir (https://github.com/gtk-rs/gir @ e43ea0b348f0)
// from ../../gir-files (@ dd572419067b)
// DO NOT EDIT

use dbusmenu_sys::*;
use std::mem::{align_of, size_of};
use std::env;
use std::error::Error;
use std::ffi::OsString;
use std::path::Path;
use std::process::Command;
use std::str;
use tempfile::Builder;

static PACKAGES: &[&str] = &["dbusmenu-glib-0.4"];

#[derive(Clone, Debug)]
struct Compiler {
    pub args: Vec<String>,
}

impl Compiler {
    pub fn new() -> Result<Self, Box<dyn Error>> {
        let mut args = get_var("CC", "cc")?;
        args.push("-Wno-deprecated-declarations".to_owned());
        // For _Generic
        args.push("-std=c11".to_owned());
        // For %z support in printf when using MinGW.
        args.push("-D__USE_MINGW_ANSI_STDIO".to_owned());
        args.extend(get_var("CFLAGS", "")?);
        args.extend(get_var("CPPFLAGS", "")?);
        args.extend(pkg_config_cflags(PACKAGES)?);
        Ok(Self { args })
    }

    pub fn compile(&self, src: &Path, out: &Path) -> Result<(), Box<dyn Error>> {
        let mut cmd = self.to_command();
        cmd.arg(src);
        cmd.arg("-o");
        cmd.arg(out);
        let status = cmd.spawn()?.wait()?;
        if !status.success() {
            return Err(format!("compilation command {:?} failed, {}", &cmd, status).into());
        }
        Ok(())
    }

    fn to_command(&self) -> Command {
        let mut cmd = Command::new(&self.args[0]);
        cmd.args(&self.args[1..]);
        cmd
    }
}

fn get_var(name: &str, default: &str) -> Result<Vec<String>, Box<dyn Error>> {
    match env::var(name) {
        Ok(value) => Ok(shell_words::split(&value)?),
        Err(env::VarError::NotPresent) => Ok(shell_words::split(default)?),
        Err(err) => Err(format!("{} {}", name, err).into()),
    }
}

fn pkg_config_cflags(packages: &[&str]) -> Result<Vec<String>, Box<dyn Error>> {
    if packages.is_empty() {
        return Ok(Vec::new());
    }
    let pkg_config = env::var_os("PKG_CONFIG")
        .unwrap_or_else(|| OsString::from("pkg-config"));
    let mut cmd = Command::new(pkg_config);
    cmd.arg("--cflags");
    cmd.args(packages);
    let out = cmd.output()?;
    if !out.status.success() {
        return Err(format!("command {:?} returned {}",
                           &cmd, out.status).into());
    }
    let stdout = str::from_utf8(&out.stdout)?;
    Ok(shell_words::split(stdout.trim())?)
}


#[derive(Copy, Clone, Debug, Eq, PartialEq)]
struct Layout {
    size: usize,
    alignment: usize,
}

#[derive(Copy, Clone, Debug, Default, Eq, PartialEq)]
struct Results {
    /// Number of successfully completed tests.
    passed: usize,
    /// Total number of failed tests (including those that failed to compile).
    failed: usize,
}

impl Results {
    fn record_passed(&mut self) {
        self.passed += 1;
    }
    fn record_failed(&mut self) {
        self.failed += 1;
    }
    fn summary(&self) -> String {
        format!("{} passed; {} failed", self.passed, self.failed)
    }
    fn expect_total_success(&self) {
        if self.failed == 0 {
            println!("OK: {}", self.summary());
        } else {
            panic!("FAILED: {}", self.summary());
        };
    }
}

#[test]
#[cfg(target_os = "linux")]
fn cross_validate_constants_with_c() {
    let mut c_constants: Vec<(String, String)> = Vec::new();

    for l in get_c_output("constant").unwrap().lines() {
        let (name, value) = l.split_once(';').expect("Missing ';' separator");
        c_constants.push((name.to_owned(), value.to_owned()));
    }

    let mut results = Results::default();

    for ((rust_name, rust_value), (c_name, c_value)) in
        RUST_CONSTANTS.iter().zip(c_constants.iter())
    {
        if rust_name != c_name {
            results.record_failed();
            eprintln!("Name mismatch:\nRust: {:?}\nC:    {:?}", rust_name, c_name,);
            continue;
        }

        if rust_value != c_value {
            results.record_failed();
            eprintln!(
                "Constant value mismatch for {}\nRust: {:?}\nC:    {:?}",
                rust_name, rust_value, &c_value
            );
            continue;
        }

        results.record_passed();
    }

    results.expect_total_success();
}

#[test]
#[cfg(target_os = "linux")]
fn cross_validate_layout_with_c() {
    let mut c_layouts = Vec::new();

    for l in get_c_output("layout").unwrap().lines() {
        let (name, value) = l.split_once(';').expect("Missing first ';' separator");
        let (size, alignment) = value.split_once(';').expect("Missing second ';' separator");
        let size = size.parse().expect("Failed to parse size");
        let alignment = alignment.parse().expect("Failed to parse alignment");
        c_layouts.push((name.to_owned(), Layout { size, alignment }));
    }

    let mut results = Results::default();

    for ((rust_name, rust_layout), (c_name, c_layout)) in
        RUST_LAYOUTS.iter().zip(c_layouts.iter())
    {
        if rust_name != c_name {
            results.record_failed();
            eprintln!("Name mismatch:\nRust: {:?}\nC:    {:?}", rust_name, c_name,);
            continue;
        }

        if rust_layout != c_layout {
            results.record_failed();
            eprintln!(
                "Layout mismatch for {}\nRust: {:?}\nC:    {:?}",
                rust_name, rust_layout, &c_layout
            );
            continue;
        }

        results.record_passed();
    }

    results.expect_total_success();
}

fn get_c_output(name: &str) -> Result<String, Box<dyn Error>> {
    let tmpdir = Builder::new().prefix("abi").tempdir()?;
    let exe = tmpdir.path().join(name);
    let c_file = Path::new("tests").join(name).with_extension("c");

    let cc = Compiler::new().expect("configured compiler");
    cc.compile(&c_file, &exe)?;

    let mut abi_cmd = Command::new(exe);
    let output = abi_cmd.output()?;
    if !output.status.success() {
        return Err(format!("command {:?} failed, {:?}", &abi_cmd, &output).into());
    }

    Ok(String::from_utf8(output.stdout)?)
}

const RUST_LAYOUTS: &[(&str, Layout)] = &[
    ("DbusmenuClient", Layout {size: size_of::<DbusmenuClient>(), alignment: align_of::<DbusmenuClient>()}),
    ("DbusmenuClientClass", Layout {size: size_of::<DbusmenuClientClass>(), alignment: align_of::<DbusmenuClientClass>()}),
    ("DbusmenuMenuitem", Layout {size: size_of::<DbusmenuMenuitem>(), alignment: align_of::<DbusmenuMenuitem>()}),
    ("DbusmenuMenuitemClass", Layout {size: size_of::<DbusmenuMenuitemClass>(), alignment: align_of::<DbusmenuMenuitemClass>()}),
    ("DbusmenuMenuitemProxy", Layout {size: size_of::<DbusmenuMenuitemProxy>(), alignment: align_of::<DbusmenuMenuitemProxy>()}),
    ("DbusmenuMenuitemProxyClass", Layout {size: size_of::<DbusmenuMenuitemProxyClass>(), alignment: align_of::<DbusmenuMenuitemProxyClass>()}),
    ("DbusmenuServer", Layout {size: size_of::<DbusmenuServer>(), alignment: align_of::<DbusmenuServer>()}),
    ("DbusmenuServerClass", Layout {size: size_of::<DbusmenuServerClass>(), alignment: align_of::<DbusmenuServerClass>()}),
    ("DbusmenuStatus", Layout {size: size_of::<DbusmenuStatus>(), alignment: align_of::<DbusmenuStatus>()}),
    ("DbusmenuTextDirection", Layout {size: size_of::<DbusmenuTextDirection>(), alignment: align_of::<DbusmenuTextDirection>()}),
];

const RUST_CONSTANTS: &[(&str, &str)] = &[
    ("DBUSMENU_CLIENT_PROP_DBUS_NAME", "dbus-name"),
    ("DBUSMENU_CLIENT_PROP_DBUS_OBJECT", "dbus-object"),
    ("DBUSMENU_CLIENT_PROP_GROUP_EVENTS", "group-events"),
    ("DBUSMENU_CLIENT_PROP_STATUS", "status"),
    ("DBUSMENU_CLIENT_PROP_TEXT_DIRECTION", "text-direction"),
    ("DBUSMENU_CLIENT_SIGNAL_EVENT_RESULT", "event-result"),
    ("DBUSMENU_CLIENT_SIGNAL_ICON_THEME_DIRS_CHANGED", "icon-theme-dirs-changed"),
    ("DBUSMENU_CLIENT_SIGNAL_ITEM_ACTIVATE", "item-activate"),
    ("DBUSMENU_CLIENT_SIGNAL_LAYOUT_UPDATED", "layout-updated"),
    ("DBUSMENU_CLIENT_SIGNAL_NEW_MENUITEM", "new-menuitem"),
    ("DBUSMENU_CLIENT_SIGNAL_ROOT_CHANGED", "root-changed"),
    ("DBUSMENU_CLIENT_TYPES_DEFAULT", "standard"),
    ("DBUSMENU_CLIENT_TYPES_IMAGE", "standard"),
    ("DBUSMENU_CLIENT_TYPES_SEPARATOR", "separator"),
    ("DBUSMENU_MENUITEM_CHILD_DISPLAY_SUBMENU", "submenu"),
    ("DBUSMENU_MENUITEM_DISPOSITION_ALERT", "alert"),
    ("DBUSMENU_MENUITEM_DISPOSITION_INFORMATIVE", "informative"),
    ("DBUSMENU_MENUITEM_DISPOSITION_NORMAL", "normal"),
    ("DBUSMENU_MENUITEM_DISPOSITION_WARNING", "warning"),
    ("DBUSMENU_MENUITEM_EVENT_ACTIVATED", "clicked"),
    ("DBUSMENU_MENUITEM_EVENT_CLOSED", "closed"),
    ("DBUSMENU_MENUITEM_EVENT_OPENED", "opened"),
    ("DBUSMENU_MENUITEM_ICON_NAME_BLANK", "blank-icon"),
    ("DBUSMENU_MENUITEM_PROP_ACCESSIBLE_DESC", "accessible-desc"),
    ("DBUSMENU_MENUITEM_PROP_CHILD_DISPLAY", "children-display"),
    ("DBUSMENU_MENUITEM_PROP_DISPOSITION", "disposition"),
    ("DBUSMENU_MENUITEM_PROP_ENABLED", "enabled"),
    ("DBUSMENU_MENUITEM_PROP_ICON_DATA", "icon-data"),
    ("DBUSMENU_MENUITEM_PROP_ICON_NAME", "icon-name"),
    ("DBUSMENU_MENUITEM_PROP_LABEL", "label"),
    ("DBUSMENU_MENUITEM_PROP_SHORTCUT", "shortcut"),
    ("DBUSMENU_MENUITEM_PROP_TOGGLE_STATE", "toggle-state"),
    ("DBUSMENU_MENUITEM_PROP_TOGGLE_TYPE", "toggle-type"),
    ("DBUSMENU_MENUITEM_PROP_TYPE", "type"),
    ("DBUSMENU_MENUITEM_PROP_VISIBLE", "visible"),
    ("DBUSMENU_MENUITEM_SHORTCUT_ALT", "Alt"),
    ("DBUSMENU_MENUITEM_SHORTCUT_CONTROL", "Control"),
    ("DBUSMENU_MENUITEM_SHORTCUT_SHIFT", "Shift"),
    ("DBUSMENU_MENUITEM_SHORTCUT_SUPER", "Super"),
    ("DBUSMENU_MENUITEM_SIGNAL_ABOUT_TO_SHOW", "about-to-show"),
    ("DBUSMENU_MENUITEM_SIGNAL_CHILD_ADDED", "child-added"),
    ("DBUSMENU_MENUITEM_SIGNAL_CHILD_MOVED", "child-moved"),
    ("DBUSMENU_MENUITEM_SIGNAL_CHILD_REMOVED", "child-removed"),
    ("DBUSMENU_MENUITEM_SIGNAL_EVENT", "event"),
    ("DBUSMENU_MENUITEM_SIGNAL_ITEM_ACTIVATED", "item-activated"),
    ("DBUSMENU_MENUITEM_SIGNAL_PROPERTY_CHANGED", "property-changed"),
    ("DBUSMENU_MENUITEM_SIGNAL_REALIZED", "realized"),
    ("DBUSMENU_MENUITEM_SIGNAL_SHOW_TO_USER", "show-to-user"),
    ("DBUSMENU_MENUITEM_TOGGLE_CHECK", "checkmark"),
    ("DBUSMENU_MENUITEM_TOGGLE_RADIO", "radio"),
    ("DBUSMENU_MENUITEM_TOGGLE_STATE_CHECKED", "1"),
    ("DBUSMENU_MENUITEM_TOGGLE_STATE_UNCHECKED", "0"),
    ("DBUSMENU_MENUITEM_TOGGLE_STATE_UNKNOWN", "-1"),
    ("DBUSMENU_SERVER_PROP_DBUS_OBJECT", "dbus-object"),
    ("DBUSMENU_SERVER_PROP_ROOT_NODE", "root-node"),
    ("DBUSMENU_SERVER_PROP_STATUS", "status"),
    ("DBUSMENU_SERVER_PROP_TEXT_DIRECTION", "text-direction"),
    ("DBUSMENU_SERVER_PROP_VERSION", "version"),
    ("DBUSMENU_SERVER_SIGNAL_ID_PROP_UPDATE", "item-property-updated"),
    ("DBUSMENU_SERVER_SIGNAL_ID_UPDATE", "item-updated"),
    ("DBUSMENU_SERVER_SIGNAL_ITEM_ACTIVATION", "item-activation-requested"),
    ("DBUSMENU_SERVER_SIGNAL_LAYOUT_UPDATED", "layout-updated"),
    ("(gint) DBUSMENU_STATUS_NORMAL", "0"),
    ("(gint) DBUSMENU_STATUS_NOTICE", "1"),
    ("(gint) DBUSMENU_TEXT_DIRECTION_LTR", "1"),
    ("(gint) DBUSMENU_TEXT_DIRECTION_NONE", "0"),
    ("(gint) DBUSMENU_TEXT_DIRECTION_RTL", "2"),
];


